package com.virtlink.kasm

import org.objectweb.asm.Opcodes
import java.util.*

/**
 * Modifiers for methods.
 */
enum class MethodModifier(
    val value: Int
) {
    /** The method is accessible outside its package. */
    Public(Opcodes.ACC_PUBLIC),
    /** The method is accessible only within its defining class. */
    Private(Opcodes.ACC_PRIVATE),
    /** The method is accessible to its subclasses. */
    Protected(Opcodes.ACC_PROTECTED),
    /** The method is static. */
    Static(Opcodes.ACC_STATIC),
    /** The method cannot be overridden. */
    Final(Opcodes.ACC_FINAL),
    /** The method invocation is wrapped by a monitor use. */
    Synchronized(Opcodes.ACC_SYNCHRONIZED),
    /** The method is a bridge method generated by the compiler. */
    Bridge(Opcodes.ACC_BRIDGE),
    /** The method has a variable number of arguments. */
    Varargs(Opcodes.ACC_VARARGS),
    /** The method is implemented in a language other than Java. */
    Native(Opcodes.ACC_NATIVE),
    /** The method has no implementation. */
    Abstract(Opcodes.ACC_ABSTRACT),
    /** The method uses a strict floating-point mode. */
    Strict(Opcodes.ACC_STRICT),
    /** The method is not explicitly declared in the source code. */
    Synthetic(Opcodes.ACC_SYNTHETIC),
    /** The method was not explicitly declared in the source code but implicitly mandated by the specification. */
    Mandated(Opcodes.ACC_MANDATED),
    /** The method is deprecated. ASM-specific. */
    Deprecated(Opcodes.ACC_DEPRECATED);

    infix fun or(other: MethodModifier): MethodModifiers = MethodModifiers.of(this, other)
}

typealias MethodModifiers = EnumSet<MethodModifier>

infix fun MethodModifiers.or(other: MethodModifier): MethodModifiers = MethodModifiers.of(other, *this.toTypedArray())

fun MethodModifiers.toInt(): Int {
    return this.fold(0) { acc, m -> acc or m.value }
}