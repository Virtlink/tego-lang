module Common

lexical sorts
  ID MOD_ID INT
  BACKSLASH_CHAR
  COMMENT_CHAR INSIDE_COMMENT
  NEWLINE_EOF EOF

lexical syntax

  ID               = [a-zA-Z] [a-zA-Z0-9\'\-\_]*
  ID               = "_" [a-zA-Z0-9\'\-\_]+
  ID               = "`" ID_CHAR+ "`"
  ID_CHAR          = ~[\`\\\n]

  MOD_ID           = (ID "/")* ID

  INT              = "-"? [0-9]+
  LAYOUT           = [\ \t\n\r]
  COMMENT_CHAR     = [\*]
  LAYOUT           = "/*" INSIDE_COMMENT* "*/"
  INSIDE_COMMENT   = ~[\*]
  INSIDE_COMMENT   = COMMENT_CHAR
  LAYOUT           = "//" ~[\n\r]* NEWLINE_EOF
  NEWLINE_EOF      = [\n\r]
  NEWLINE_EOF      = EOF
  EOF              =
  
lexical sorts FLOATLIT
lexical syntax

  FLOATLIT         = [0-9]+ "." [0-9]+ FLOATLIT_EXP?
  FLOATLIT         = "." [0-9]+ FLOATLIT_EXP?
  FLOATLIT         = [0-9]+ FLOATLIT_EXP
  
  FLOATLIT_EXP     = [eE] [\+\-]? [0-9]+
  
lexical sorts CHARLIT CHARLIT_CHAR CHAR_ESC
lexical syntax

  CHARLIT          = "'" CHARLIT_CHAR "'"
  CHARLIT_CHAR     = ~[\\\'\n\r]
  CHARLIT_CHAR     = CHAR_ESC
  CHAR_ESC         = "\\" [\\\"\'tbnr0\$]
  CHAR_ESC         = "\\" "u" [0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]
  CHAR_ESC         = "\\" "x" [0-9a-fA-F][0-9a-fA-F]?[0-9a-fA-F]?[0-9a-fA-F]?

lexical sorts STRINGLIT STRINGLIT_CHAR
lexical syntax

  STRINGLIT        = "\"" STRINGLIT_CHAR* "\""
  STRINGLIT_CHAR   = ~[\\\"\n\r]
  STRINGLIT_CHAR   = CHAR_ESC

lexical restrictions

  // Ensure greedy matching for lexicals

  COMMENT_CHAR    -/- [\/]
  INT             -/- [0-9]
  ID              -/- [a-zA-Z0-9\'\-\_]

  // EOF may not be followed by any char

  EOF             -/- ~[]

context-free restrictions

  // Ensure greedy matching for comments

  LAYOUT? -/- [\ \t\n\r]
  LAYOUT? -/- [\/].[\/]
  LAYOUT? -/- [\/].[\*]
