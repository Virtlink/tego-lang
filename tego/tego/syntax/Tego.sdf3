module Tego

imports

  Common

/**
 * A file.
 */
context-free start-symbols File
context-free sorts File
context-free syntax

  File.File                             = [[{Module "\n\n"}*]]

/**
 * A module.
 */
context-free sorts Module
context-free syntax

  Module.Module = <<{ModuleMod " "}*> module <MOD_ID>

    <{Import "\n"}*>

    <{Decl "\n"}*>>

/**
 * A top-level import of a module or a specific declaration from a module.
 */
context-free sorts Import
context-free syntax

  Import.Import                         = [import [MOD_ID]::[ID]]
  Import.ImportAll                      = [import [MOD_ID]::[]*]

/**
 * A top-level declaration.
 */
context-free sorts Decl
context-free syntax

  Decl.ValDef                           = [[{DeclMod " "}*] val [ID]: [Type] = [Exp]]
  Decl.ValDefNoType                     = [[{DeclMod " "}*] val [ID] = [Exp]]
  Decl.ValDecl                          = [[{DeclMod " "}*] val [ID]: [Type]]
  
  Decl.StrategyDef                      = [[{DeclMod " "}*] def [ID]<[{TypeParamDecl ", "}*]>([{ParamDecl ", "}*]): [Type] -> [Type] = [Exp]]
  Decl.StrategyDefNoParams              = [[{DeclMod " "}*] def [ID]<[{TypeParamDecl ", "}*]>: [Type] -> [Type] = [Exp]]               // desugared
  Decl.StrategyDefNoTypeParams          = [[{DeclMod " "}*] def [ID]([{ParamDecl ", "}*]): [Type] -> [Type] = [Exp]]                   // desugared
  Decl.StrategyDefNoParamsNoTypeParams  = [[{DeclMod " "}*] def [ID]: [Type] -> [Type] = [Exp]]                                        // desugared
  
  Decl.StrategyDefNoType                = [[{DeclMod " "}*] def [ID]([{ParamDeclNoType ", "}*]) = [Exp]]
  Decl.StrategyDefNoTypeNoParams        = [[{DeclMod " "}*] def [ID] = [Exp]]                                                          // desugared
  
  Decl.RuleDef                          = [[{DeclMod " "}*] def [ID]<[{TypeParamDecl ", "}*]>([{ParamDecl ", "}*]): [Type] -> [Type] :- [Exp] -> [Exp]]
  Decl.RuleDefNoParams                  = [[{DeclMod " "}*] def [ID]<[{TypeParamDecl ", "}*]>: [Type] -> [Type] :- [Exp] -> [Exp]]     // desugared
  Decl.RuleDefNoTypeParams              = [[{DeclMod " "}*] def [ID]([{ParamDecl ", "}*]): [Type] -> [Type] :- [Exp] -> [Exp]]         // desugared
  Decl.RuleDefNoParamsNoTypeParams      = [[{DeclMod " "}*] def [ID]: [Type] -> [Type] :- [Exp] -> [Exp]]                              // desugared

  Decl.RuleDefNoType                    = [[{DeclMod " "}*] def [ID]([{ParamDeclNoType ", "}*]) :- [Exp] -> [Exp]]
  Decl.RuleDefNoTypeNoParams            = [[{DeclMod " "}*] def [ID] :- [Exp] -> [Exp]]                                                // desugared

  Decl.StrategyDecl                     = [[{DeclMod " "}*] def [ID]<[{TypeParamDecl ", "}*]>([{Type ", "}*]): [Type] -> [Type]]
  Decl.StrategyDeclNoParams             = [[{DeclMod " "}*] def [ID]<[{TypeParamDecl ", "}*]>: [Type] -> [Type]]                       // desugared
  Decl.StrategyDeclNoTypeParams         = [[{DeclMod " "}*] def [ID]([{Type ", "}*]): [Type] -> [Type]]                                // desugared
  Decl.StrategyDeclNoParamsNoTypeParams = [[{DeclMod " "}*] def [ID]: [Type] -> [Type]]                                                // desugared
  
  Decl.FunctionDef                      = [[{DeclMod " "}*] fun [ID]<[{TypeParamDecl ", "}*]>([{ParamDecl ", "}*]): [Type] = [Exp]]
  Decl.FunctionDefNoParams              = [[{DeclMod " "}*] fun [ID]<[{TypeParamDecl ", "}*]>: [Type] = [Exp]]                         // desugared
  Decl.FunctionDefNoTypeParams          = [[{DeclMod " "}*] fun [ID]([{ParamDecl ", "}*]): [Type] = [Exp]]                             // desugared
  Decl.FunctionDefNoParamsNoTypeParams  = [[{DeclMod " "}*] fun [ID]: [Type] = [Exp]]                                                  // desugared
 
  Decl.FunctionDefNoType                = [[{DeclMod " "}*] fun [ID]([{ParamDeclNoType ", "}*]) = [Exp]]
  Decl.FunctionDefNoTypeNoParams        = [[{DeclMod " "}*] fun [ID] = [Exp]]                                                          // desugared

  Decl.FunctionDecl                     = [[{DeclMod " "}*] fun [ID]<[{TypeParamDecl ", "}*]>([{Type ", "}*]): [Type]]
  Decl.FunctionDeclNoParams             = [[{DeclMod " "}*] fun [ID]<[{TypeParamDecl ", "}*]>: [Type]]                                 // desugared
  Decl.FunctionDeclNoTypeParams         = [[{DeclMod " "}*] fun [ID]([{Type ", "}*]): [Type]]                                          // desugared
  Decl.FunctionDeclNoParamsNoTypeParams = [[{DeclMod " "}*] fun [ID]: [Type]]                                                          // desugared
  
  Decl.ClassDecl                        = [[{DeclMod " "}*] class [ID]<[{TypeParamDecl ", "}*]>]
  Decl.ClassDeclNoTypeParams            = [[{DeclMod " "}*] class [ID]]                                                                // desugared
  Decl.InterfaceDecl                    = [[{DeclMod " "}*] interface [ID]]
  Decl.EnumDecl                         = [[{DeclMod " "}*] enum [ID]]

context-free sorts ParamDecl ParamDeclNoType TypeParamDecl
context-free syntax
  ParamDecl.ParamDecl                   = [[ID]: [Type]]
  ParamDeclNoType.ParamDeclNoType       = [[ID]]
  TypeParamDecl.TypeParamDecl           = [[ID]]

/**
 * Modifiers for a module declaration.
 */
context-free sorts ModuleMod
context-free syntax
  // TODO: An external module may only contain external declarations
  // TODO: An external module should implicitly add `external` to its declarations
  ModuleMod.ExternModule                = [extern]

/**
 * Modifiers for a top-level declaration.
 */
context-free sorts DeclMod
context-free syntax
  // TODO: An external declaration cannot have a definition
  // TODO: An external declaration is implicitly public
  DeclMod.ExternDecl                    = [extern]
  // TODO: A public declaration cannot be imported
  DeclMod.PublicDecl                    = [public]

/**
 * Syntactic types.
 */
context-free sorts Type
context-free syntax

  Type.TypeRef                          = [[MOD_ID]]
  Type.MemberTypeRef                    = [[Type]::[ID]]
  Type.ListType                         = <[<Type>]>
  Type.StrategyType                     = [([{Type ", "}*]) [Type] -> [Type]] {right}
  Type.StrategyTypeNoParams             = [[Type] -> [Type]] {right} // desugared
  Type.WldType                          = [_]
  Type.TupleType                        = [([{Type ", "}+])]
  Type                                  = [([Type])] {bracket}
  
  // Primitive types
  // FIXME: Should be built-in types:
  Type.BoolType                         = [Bool]
  Type.CharType                         = [Char]
  
  Type.ByteType                         = [Byte]
  Type.ShortType                        = [Short]
  Type.IntType                          = [Int]
  Type.LongType                         = [Long]
  
  Type.UByteType                        = [UByte]
  Type.UShortType                       = [UShort]
  Type.UIntType                         = [UInt]
  Type.ULongType                        = [ULong]
  
  Type.FloatType                        = [Float]
  Type.DoubleType                       = [Double]
  
  Type.AnyType                          = [Any]
  Type.NothingType                      = [Nothing]
  
  Type.UnitType                         = [Unit]
  Type.StringType                       = [String]
  
  Type.NullableType                     = [[Type]?]

context-free priorities
  {
    Type.NullableType
  } > {
    Type.StrategyType
    Type.StrategyTypeNoParams
  }
  
/**
 * Core expressions.
 */
context-free sorts Exp
context-free syntax

  // IR
  Exp.Eval                              = [__eval([Exp], [{Exp ", "}+])]
  Exp.Maybe                             = [__maybe([Exp])]
  Exp.Let                               = [let [ID] = [Exp],
[Exp]]

  // (Partial) application
  Exp.Apply                             = [[Exp]([{Exp ", "}*])]
  
  // References
  Exp.Capture                           = [@[MOD_ID]]
  Exp.Var                               = [[MOD_ID]]
  Exp.GenericInst                       = [[MOD_ID]<[{Type ", "}+]>]
  Exp.Member                            = [[Exp]::[ID]]
  Exp.GenericMemberInst                 = [[Exp]::[ID]<[{Type ", "}+]>]
  Exp.ClassRef                          = <<Type>::<>class>
  
  // Literals
  Exp.Int                               = <<INT>>
  Exp.String                            = <<STRINGLIT>>
  Exp.Char                              = <<CHARLIT>>
  Exp.Float                             = <<FLOATLIT>>
  Exp.Object                            = <object>
  Exp.True                              = <true>
  Exp.False                             = <false>
  Exp.Null                              = <null>
  Exp.Unit                              = <unit>
  Exp.Tuple                             = <(<{Exp ", "}+>)>
  Exp                                   = <(<Exp>)> {bracket}

  // Lambdas
  Exp.LambdaStrategy                    = [\\<[{TypeParamDecl ", "}*]>([{ParamDecl ", "}*]): [Type] -> [Type] = [Exp]\\]
  Exp.LambdaStrategyNoParams            = [\\<[{TypeParamDecl ", "}*]>: [Type] -> [Type] = [Exp]\\]                                    // desugared
  Exp.LambdaStrategyNoTypeParams        = [\\([{ParamDecl ", "}*]): [Type] -> [Type] = [Exp]\\]                                        // desugared
  Exp.LambdaStrategyNoParamsNoTypeParams= [\\: [Type] -> [Type] = [Exp]\\]                                                             // desugared
  Exp.LambdaStrategyNoType              = [\\([{ParamDeclNoType ", "}*]) = [Exp]\\]
  Exp.LambdaStrategyNoTypeNoParams      = [\\= [Exp]\\]                                                                                // desugared
  
  Exp.LambdaRule                        = [\\<[{TypeParamDecl ", "}*]>([{ParamDecl ", "}*]): [Type] -> [Type] :- [ID] -> [Exp]\\]
  Exp.LambdaRuleNoParams                = [\\<[{TypeParamDecl ", "}*]>: [Type] -> [Type] :- [ID] -> [Exp]\\]                           // desugared
  Exp.LambdaRuleNoTypeParams            = [\\([{ParamDecl ", "}*]): [Type] -> [Type] :- [ID] -> [Exp]\\]                               // desugared
  Exp.LambdaRuleNoParamsNoTypeParams    = [\\: [Type] -> [Type] :- [ID] -> [Exp]\\]                                                    // desugared
  Exp.LambdaRuleNoType                  = [\\([{ParamDeclNoType ", "}*]) :- [ID] -> [Exp]\\]
  Exp.LambdaRuleNoTypeNoParams          = [\\:- [ID] -> [Exp]\\]                                                                       // desugared
  

/**
 * Sugar expressions.
 */
context-free syntax

  // Composition
  Exp.Seq                               = [[Exp]; [Exp]] {right}
  Exp.Map                               = [[Exp] |> [Exp]] {right}
  Exp.FlatMap                           = [[Exp] ||> [Exp]] {right}
  
  // Evaluation
  Exp.EvalOn                            = [<[Exp]> [Exp]]
  
  // Build/Match
  Exp.Build                             = [![Exp]]
  
  // Built-ins
  //Exp.Id                                = [id]
  Exp.Fail                              = [fail]

context-free priorities
  {
    Exp.Apply
    Exp.Build
  } > {
    Exp.Map
    Exp.FlatMap
  } > {
    Exp.Seq
  }


template options
  ID = keyword {reject}
  MOD_ID = keyword {reject}
  keyword -/- [A-Za-z0-9]
