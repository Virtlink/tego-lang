module Tego

imports

  Common

context-free start-symbols

  Module

context-free sorts Module
context-free syntax

  Module.Module = <<ModuleDecl>

    <{Decl "\n"}*>>

context-free sorts ModuleDecl
context-free syntax

  ModuleDecl.ModuleDecl = <module <ID>>

context-free sorts Decl
context-free syntax

  Decl.ValDef                   = [[{DeclMod " "}*] val [ID]: [Type] = [Exp].]
  Decl.ValDecl                  = [[{DeclMod " "}*] val [ID]: [Type]]
  Decl.ValDefNoType             = [[{DeclMod " "}*] val [ID] = [Exp].]

  Decl.StrategyDecl             = [[{DeclMod " "}*] def [ID]<[{TypeParamDecl ", "}*]>([{Type ", "}*]): [Type] -> [Type]]
  Decl.StrategyDeclNoParams     = [[{DeclMod " "}*] def [ID]<[{TypeParamDecl ", "}*]>: [Type] -> [Type]] // desugared
  Decl.StrategyDeclNoTypeParams = [[{DeclMod " "}*] def [ID]([{Type ", "}*]): [Type] -> [Type]] // desugared
  Decl.StrategyDeclNoParamsOrTypeParams = [[{DeclMod " "}*] def [ID]: [Type] -> [Type]]        // desugared

  Decl.StrategyDef              = [[ID]([{ParamDef ", "}*]) = [Exp].]
  Decl.StrategyDefNoParams      = [[ID] = [Exp].]        // desugared

  Decl.RuleDef                  = [[ID]([{ParamDef ", "}*]) :- [Exp] -> [Exp].]
  Decl.RuleDefNoParams          = [[ID] :- [Exp] -> [Exp].]

  Decl.ClassDecl                = [[{DeclMod " "}*] class type [ID]]


context-free sorts DeclMod
context-free syntax
  DeclMod.Extern = <extern>

context-free sorts ParamDef
context-free syntax
  ParamDef.ParamDef = <<ID>>

context-free sorts TypeParamDecl
context-free syntax
  TypeParamDecl.TypeParamDecl = <<ID>>

context-free sorts ParamDecl
context-free syntax
  ParamDecl.ParamDecl = <<ID>: <Type>>

context-free sorts Type
context-free syntax

  Type.TypeRef              = <<ID>>
  Type.ListType             = <[<Type>]>
  Type.StrategyType         = [([{Type ", "}*]) [Type] -> [Type]] {right}
  Type.StrategyTypeNoParams = [[Type] -> [Type]] {right} // desugared
  Type.AnyType              = <Any>     // FIXME: Make built-in
  Type.UnitType             = <Unit>    // FIXME: Make built-in
  Type.IntType              = <Int>     // FIXME: Make built-in
  Type.BoolType             = <Bool>    // FIXME: Make built-in
  Type.WldType              = <_>
  Type.TupleType            = <(<{Type ", "}+>)>
  Type                      = <(<Type>)> {bracket}

context-free sorts Exp Arg
context-free syntax

  Exp.Seq                       = <<Exp>; <Exp>> {right}
  Exp.Map                       = [[Exp] |> [Exp]] {right}
  Exp.FlatMap                   = [[Exp] ||> [Exp]] {right}
  Exp.Id                        = <id>
  Exp.Fail                      = <fail>
  Exp.Apply                     = [[Exp]([{Exp ", "}*])]
//  Exp.Eval = [<[Exp]> [Exp]]
  Exp.Var = <<ID>>
  Exp.Inst                      = [[Exp]<[{Type ", "}+]>]
  //Exp.InstInfer                 = [[Exp]<[]>]
  Exp.Int = <<INT>>
  Exp.Object = <object>
  Exp.True = <true>
  Exp.False = <false>
  Exp.String = <<STRING>>
  Exp.Build = <!<Exp>>
  Exp.Tuple                     = <(<{Exp ", "}+>)>
  Exp                           = <(<Exp>)> {bracket}

  Exp.LambdaRule                = [\\([{ParamDef ", "}*]) :- [Exp] -> [Exp].\\]
  Exp.LambdaRuleNoParams        = [\\[Exp] -> [Exp].\\]    // desugared
  Exp.LambdaStrategy            = [\\([{ParamDef ", "}*]) = [Exp].\\]
  Exp.LambdaStrategyNoParams    = [\\= [Exp].\\]           // desugared

//context-free sorts Exp
//context-free syntax
//
//  Exp.Var = <<ID>>

//context-free priorities
  //Arg = Exp <0> .> Exp.Seq


context-free priorities
  {
    Exp.Apply
    Exp.Inst
    //Exp.InstInfer
    Exp.Build
  } > {
    Exp.Map
    Exp.FlatMap
  } > {
    Exp.Seq
  }

context-free priorities
  {
    Type.StrategyType
  }

template options
  ID = keyword {reject}
  keyword -/- [A-Za-z0-9]
