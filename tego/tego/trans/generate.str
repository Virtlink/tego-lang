module generate

imports
  signatures/Tego-sig

  libspoofax/term/annotation
  analysis
  pp

  statix/runtime/analysis
  statix/runtime/ast
  statix/api

signature
  constructors
    OfType : /* TYPE */ Term -> Annotation
    OfRef  : /* TermIndex */ Term -> Annotation
    OfDecl : /* TermIndex */ Term -> Annotation

rules

  // Works on the analyzed term
  generate-annotated-aterm: (_, _, f@File(_), path, project-path) -> (filename, result)
  with filename := <guarantee-extension(|"annotated.aterm")> path
     ; result := <bottomup(annotate-with-type; annotate-with-ref; annotate-with-decl)> f

  annotate-with-type = try(
      id                                // Sorts to annotate
      //(is-Tego-Decl + is-Tego-Exp)      // Sorts to annotate
      ; add-annotation(|OfType(<get-type; not(?"nabl2.Var"#(_))>))
    )

  annotate-with-ref = try(
      id                                // Sorts to annotate
      ; add-annotation(|OfRef(<get-ref; not(?"nabl2.Var"#(_))>))
    )

  annotate-with-decl = try(
      id                                // Sorts to annotate
      ; add-annotation(|OfDecl(<get-decl; not(?"nabl2.Var"#(_))>))
    )

rules

  get-type: term -> type
    where a      := <stx-get-ast-analysis <+ fail-msg(|$[get type: no analysis on node [<strip-annos; write-to-string> term]])>
        ; type   := <stx-get-ast-type(|a) <+ fail-msg(|$[get type: no type on node [<strip-annos; write-to-string> term]])> term

  get-ref: term -> ref
    where a      := <stx-get-ast-analysis <+ fail-msg(|$[get ref: no analysis on node [<strip-annos; write-to-string> term]])>
        ; ref    := <stx-get-ast-ref(|a)  <+ fail-msg(|$[get ref: no ref on node [<strip-annos; write-to-string> term]])> term

  get-decl: term -> decl
    where a      := <stx-get-ast-analysis <+ fail-msg(|$[get decl: no analysis on node [<strip-annos; write-to-string> term]])>
        ; decl   := <stx-get-ast-property(|a, "decl") <+ fail-msg(|$[get decl: no decl on node [<strip-annos; write-to-string> term]])> term

  fail-msg(|msg) = err-msg(|msg); fail
