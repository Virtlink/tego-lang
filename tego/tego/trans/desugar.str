module desugar

imports

  signatures/Tego-sig

rules

  // Desugar to existing constructors defined in the syntax
  desugar-all = topdown(try(
    desugar-decl +
    desugar-exp
  )); topdown(try(
    desugar-module
  ))

rules

  desugar-decl: StrategyDeclNoParams(mods, name, typeParams, inType, outType) -> StrategyDecl(mods, name, typeParams, [], inType, outType)
  desugar-decl: StrategyDeclNoTypeParams(mods, name, params, inType, outType) -> StrategyDecl(mods, name, [], params, inType, outType)
  desugar-decl: StrategyDeclNoParamsOrTypeParams(mods, name, inType, outType) -> StrategyDecl(mods, name, [], [], inType, outType)

  desugar-decl: StrategyDefNoParams(name, body) -> StrategyDef(name, [], body)
  desugar-decl: StrategyDefWInputNoParams(name, inputBind, body) -> StrategyDefWInput(name, [], inputBind, body)
  desugar-decl: RuleDefNoParams(name, inExp, outExp, clauses) -> RuleDef(name, [], inExp, outExp, clauses)
  desugar-decl: RuleDefNoClauses(name, params, inExp, outExp) -> RuleDef(name, params, inExp, outExp, [])
  desugar-decl: RuleDefNoParamsNoClauses(name, inExp, outExp) -> RuleDef(name, [], inExp, outExp, [])


  desugar-decl: StrategyTypeNoParams(inType, outType) -> StrategyType([], inType, outType)

rules

  desugar-exp: LambdaRuleNoParams(inExp, outExp) -> LambdaRule([], inExp, outExp)
  desugar-exp: LambdaStrategyNoParams(exp) -> LambdaStrategy([], exp)

rules

  desugar-module: Module(mods, name, imports, decls) -> Module(mods, name, imports, decls')
  where <fetch(?ExternModule())> mods
  with decls' := <topdown(try(make-decl-extern); try(make-decl-public))> decls

  make-decl-extern: ValDecl(mods, name, type) -> ValDecl([ExternDecl()|mods], name, type)
  where <not(fetch(?ExternDecl()))> mods
  make-decl-extern: StrategyDecl(mods, name, typeParams, paramTypes, inType, outType) -> StrategyDecl([ExternDecl()|mods], name, typeParams, paramTypes, inType, outType)
  where <not(fetch(?ExternDecl()))> mods
  make-decl-extern: ClassDecl(mods, name) -> ClassDecl([ExternDecl()|mods], name)
  where <not(fetch(?ExternDecl()))> mods

  make-decl-public: ValDecl(mods, name, type) -> ValDecl([PublicDecl()|mods], name, type)
  where <not(fetch(?PublicDecl()))> mods
  make-decl-public: StrategyDecl(mods, name, typeParams, paramTypes, inType, outType) -> StrategyDecl([PublicDecl()|mods], name, typeParams, paramTypes, inType, outType)
  where <not(fetch(?PublicDecl()))> mods
  make-decl-public: ClassDecl(mods, name) -> ClassDecl([PublicDecl()|mods], name)
  where <not(fetch(?PublicDecl()))> mods