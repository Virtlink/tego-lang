module desugar

imports

  signatures/Tego-sig

rules

  // Desugar to existing constructors defined in the syntax
  desugar-all = topdown(
    try(desugar-decl) ;
    try(desugar-type) ;
    try(desugar-exp)
  ); topdown(
    try(desugar-module)
  )
  
//  desugar-all = innermost(
//    desugar-decl +
//    desugar-type +
//    desugar-exp +
//    desugar-module
//  )

rules

  desugar-decl: StrategyDefNoParams(mods, name, typeParams, inType, outType, exp) -> StrategyDef(mods, name, typeParams, [], inType, outType, exp)
  desugar-decl: StrategyDefNoTypeParams(mods, name, params, inType, outType, exp) -> StrategyDef(mods, name, [], params, inType, outType, exp)
  desugar-decl: StrategyDefNoParamsNoTypeParams(mods, name, inType, outType, exp) -> StrategyDef(mods, name, [], [], inType, outType, exp)
  desugar-decl: StrategyDefNoTypeNoParams(mods, name, exp) -> StrategyDefNoType(mods, name, [], exp)
  
  desugar-decl: RuleDefNoParams(mods, name, typeParams, inType, outType, inVar, outExp) -> RuleDef(mods, name, typeParams, [], inType, outType, inVar, outExp)
  desugar-decl: RuleDefNoTypeParams(mods, name, params, inType, outType, inVar, outExp) -> RuleDef(mods, name, [], params, inType, outType, inVar, outExp)
  desugar-decl: RuleDefNoParamsNoTypeParams(mods, name, inType, outType, inVar, outExp) -> RuleDef(mods, name, [], [], inType, outType, inVar, outExp)
  desugar-decl: RuleDefNoTypeNoParams(mods, name, inVar, outExp) -> RuleDefNoType(mods, name, [], inVar, outExp)
  
  desugar-decl: StrategyDeclNoParams(mods, name, typeParams, inType, outType) -> StrategyDecl(mods, name, typeParams, [], inType, outType)
  desugar-decl: StrategyDeclNoTypeParams(mods, name, params, inType, outType) -> StrategyDecl(mods, name, [], params, inType, outType)
  desugar-decl: StrategyDeclNoParamsNoTypeParams(mods, name, inType, outType) -> StrategyDecl(mods, name, [], [], inType, outType)

  desugar-decl: FunctionDefNoParams(mods, name, typeParams, type, exp) -> FunctionDef(mods, name, typeParams, [], type, exp)
  desugar-decl: FunctionDefNoTypeParams(mods, name, params, type, exp) -> FunctionDef(mods, name, [], params, type, exp)
  desugar-decl: FunctionDefNoParamsNoTypeParams(mods, name, type, exp) -> FunctionDef(mods, name, [], [], type, exp)
  desugar-decl: FunctionDefNoTypeNoParams(mods, name, exp) -> FunctionDefNoType(mods, name, [], exp)
  
  desugar-decl: FunctionDeclNoParams(mods, name, typeParams, type) -> FunctionDecl(mods, name, typeParams, [], type)
  desugar-decl: FunctionDeclNoTypeParams(mods, name, params, type) -> FunctionDecl(mods, name, [], params, type)
  desugar-decl: FunctionDeclNoParamsNoTypeParams(mods, name, type) -> FunctionDecl(mods, name, [], [], type)
  
  desugar-decl: ClassDeclNoTypeParams(mods, name) -> ClassDecl(mods, name, [])
  
  // Makes a strategy with an implicit input argument using an explicit input argument
//  desugar-decl: StrategyDef(mods, name, typeParams, params, inType, outType, exp) -> RuleDef(mods, name, typeParams, params, inType, outType, inputVar, EvalOn(exp, Var(inputVar)))
//    with inputVar := "__input"    // TODO: Generate unique var

rules

  desugar-type: StrategyTypeNoParams(inType, outType) -> StrategyType([], inType, outType)

rules

  desugar-exp: LambdaStrategyNoParams(typeParams, inType, outType, exp) -> LambdaStrategy(typeParams, [], inType, outType, exp)
  desugar-exp: LambdaStrategyNoTypeParams(params, inType, outType, exp) -> LambdaStrategy([], params, inType, outType, exp)
  desugar-exp: LambdaStrategyNoParamsNoTypeParams(inType, outType, exp) -> LambdaStrategy([], [], inType, outType, exp)
  desugar-exp: LambdaStrategyNoTypeNoParams(exp) -> LambdaStrategyNoType([], exp)
  
  desugar-exp: LambdaRuleNoParams(typeParams, inType, outType, inExp, outExp) -> LambdaRule(typeParams, [], inType, outType, inExp, outExp)
  desugar-exp: LambdaRuleNoTypeParams(params, inType, outType, inExp, outExp) -> LambdaRule([], params, inType, outType, inExp, outExp)
  desugar-exp: LambdaRuleNoParamsNoTypeParams(inType, outType, inExp, outExp) -> LambdaRule([], [], inType, outType, inExp, outExp)
  desugar-exp: LambdaRuleNoTypeNoParams(inExp, outExp) -> LambdaRuleNoType([], inExp, outExp)
  
  desugar-exp: EvalOn(Apply(str, args*), exp) -> Eval(str, [args*, exp])
  desugar-exp: EvalOn(str, exp) -> Eval(str, [exp])
  
  desugar-exp = innermost(desugar-exp-fix)
  
  desugar-exp-fix: EvalOn(Apply(str, args*), exp) -> Eval(str, [args*, exp])
  desugar-exp-fix: EvalOn(str, exp) -> Eval(str, [exp])
  
  desugar-exp-fix: Eval(Seq(lhs, rhs), exp) -> Eval(rhs, Eval(lhs, exp))
  
  // lhs ||> rhs -> lhs ; flatMap(lhs)
  desugar-exp-fix: FlatMap(lhs, rhs)
            -> Seq(lhs, Apply(Var("flatMap"), [rhs]))
  // flatMap(lhs, flatMap(rhs)) -> flatMap(lhs) ; flatMap(rhs)
  desugar-exp-fix: Apply(Var("flatMap"), [Seq(lhs, Apply(Var("flatMap"), [rhs]))])
            -> Seq(Apply(Var("flatMap"), [lhs]), Apply(Var("flatMap"), [rhs]))
  // flatMap(lhs; rhs@(flatMap(_) ; _)) -> flatMap(lhs) ; rhs@(flatMap(_) ; _)
  desugar-exp-fix: Apply(Var("flatMap"), [Seq(lhs, rhs@Seq(Apply(Var("flatMap"), [_]), _))])
            -> Seq(Apply(Var("flatMap"), [lhs]), rhs)

rules

  desugar-module: Module(mods, name, imports, decls) -> Module(mods, name, imports, decls')
  where <fetch(?ExternModule())> mods
  with decls' := <topdown(try(make-decl-extern); try(make-decl-public))> decls

  make-decl-extern: ValDecl(mods, name, type) -> ValDecl([ExternDecl()|mods], name, type)
  where <not(fetch(?ExternDecl()))> mods
  make-decl-extern: StrategyDecl(mods, name, typeParams, paramTypes, inType, outType) -> StrategyDecl([ExternDecl()|mods], name, typeParams, paramTypes, inType, outType)
  where <not(fetch(?ExternDecl()))> mods
  make-decl-extern: ClassDecl(mods, name, tparams) -> ClassDecl([ExternDecl()|mods], name, tparams)
  where <not(fetch(?ExternDecl()))> mods

  make-decl-public: ValDecl(mods, name, type) -> ValDecl([PublicDecl()|mods], name, type)
  where <not(fetch(?PublicDecl()))> mods
  make-decl-public: StrategyDecl(mods, name, typeParams, paramTypes, inType, outType) -> StrategyDecl([PublicDecl()|mods], name, typeParams, paramTypes, inType, outType)
  where <not(fetch(?PublicDecl()))> mods
  make-decl-public: ClassDecl(mods, name, tparams) -> ClassDecl([PublicDecl()|mods], name, tparams)
  where <not(fetch(?PublicDecl()))> mods
