module statics/expressions

imports
  signatures/Tego-sig

  statics/declarations
  statics/modules
  statics/references
  statics/types
  statics/normalization

/**
 * Determines the type of an expression.
 *
 * Expressions of a parameterized type are given their own 'Ã­nstance scope',
 * in which type arguments are declared. Instance scopes are related to their
 * parent instance/declaration scope using a P (parent) edge, and are related to
 * their declaration scope using a DECL (declaration) edge.
 *
 * The semantic type of a declaration instance includes the instance scope,
 * to allow resolving members and type arguments, and finding type parameters
 * (through zero or one DECL edge and zero or more P edges).
 *
 * References to type parameters are modeled by the `TVAR(_)` type.
 *
 * @param s the resolution scope
 * @param e the expression
 * @return the semantic type
 */
rules typeOfExp : scope * Exp -> TYPE
  typesOfExps maps typeOfExp(*, list(*)) = list(*)

  typeOfExp(s, e@Seq(e1, e2)) = T :- {IT MT OT}
    typeOfExp(s, e1) == STRATEGY([], IT, MT),
    typeOfExp(s, e2) == STRATEGY([], MT, OT),
    T == STRATEGY([], IT, OT),
    @e.type := T.

  typeOfExp(s, e@Map(e1, e2)) = T :- {IT MT OT}
    typeOfExp(s, e1) == STRATEGY([], IT, LIST(MT)),
    typeOfExp(s, e2) == STRATEGY([], MT, OT),
    T == STRATEGY([], IT, LIST(OT)),
    @e.type := T.

  typeOfExp(s, e@FlatMap(e1, e2)) = T :- {IT MT OT}
    typeOfExp(s, e1) == STRATEGY([], IT, LIST(MT)),
    typeOfExp(s, e2) == STRATEGY([], MT, LIST(OT)),
    T == STRATEGY([], IT, LIST(OT)),
    @e.type := T.

//  typeOfExp(s, e@Id()) = T@STRATEGY([], ANY(), ANY()) :-
//    @e.type := T.

  typeOfExp(s, e@Fail()) = T@STRATEGY([], NULLABLE(ANY()), NOTHING()) :-
    @e.type := T.

  typeOfExp(s, e@Apply(rcv, args)) = T :- {ET TAs PTs IT OT}
    typeOfExp(s, rcv) == STRATEGY(PTs, IT, OT),
    typesOfExps(s, args) == PTs,
    T == STRATEGY([], IT, OT),
    @e.type := T.

  typeOfExp(s, e@Var(name)) = T :-
    typeOfDecl(s, name) == T,
    @e.type := T.
    
  typeOfExp(s, e@Capture(name)) = T :-
    // TODO: Declare variable
    @e.type := T.
    
//  typeOfExp(s, e@GenericVar(name, typeArgs)) = T :-
//    // TODO: Find corresponding type params, declare type args
//    resolveDecl(s, name),
//    typeOfDecl(s, name) == T,
//    @e.type := T.

  typeOfExp(s, e@Member(rcv, name)) = T :- {T_rcv s_rcv}
    typeOfExp(s, rcv) == T_rcv,
    getScope(T_rcv) == s_rcv,
    typeOfDecl(s_rcv, name) == T,
    @e.type := T.

  // FIXME: Should be Class<T> where T is the type
  typeOfExp(s, e@ClassRef(type)) = T :- //@CLASS("Class") :-
    typeOfType(s, type) == CLASS(_, _),
    typeOfDecl(s, "Class") == T,
    @e.type := T.

  typeOfExp(s, e@Int(_)) = T@INTLIT() :- @e.type := T.
  typeOfExp(s, e@String(_)) = T@STRING() :- @e.type := T.
  typeOfExp(s, e@Char(_)) = T@CHAR() :- @e.type := T.
  typeOfExp(s, e@Float(_)) = T@FLOATLIT() :- @e.type := T.

  typeOfExp(s, e@Object()) = T@ANY() :-
    @e.type := T.

  typeOfExp(s, e@True()) = T@BOOL() :-
    @e.type := T.

  typeOfExp(s, e@False()) = T@BOOL() :-
    @e.type := T.
    
  typeOfExp(s, e@Null()) = T@NULLABLE(NOTHING()) :-
    @e.type := T.
    
  typeOfExp(s, e@Unit()) = T@UNIT() :-
    @e.type := T.

  // TODO: Accept ANY() as input type
  typeOfExp(s, e@Build(exp)) = T@STRATEGY([], _, TEXP) :-
    typeOfExp(s, exp) == TEXP,
    @e.type := T.

  typeOfExp(s, e@Eval(rcv, exp)) = OT :- {IT}
    typeOfExp(s, rcv) == STRATEGY([], IT, OT),
    typeOfExp(s, exp) == IT,
    @e.type := OT.

  typeOfExp(s, e@Let(bindName, bindExp, body)) = T :- {BT ls}
    typeOfExp(s, bindExp) == BT,
    new ls, ls -P-> s,
    declareDecl(ls, bindName, BT),
    typeOfExp(ls, body) == T,
    @bindName.type := BT,
    @e.type := T.

  typeOfExp(s, e@Tuple(exps)) = T@TUPLE(Ts) :-
    typesOfExps(s, exps) == Ts,
    @e.type := T.

//  typeOfExp(s, e@LambdaRule(paramDefs, inExp, outExp)) = T :- {ss}
//    new ss, ss -P-> s,
//    new s_decl,
//    typesOfParamDefs(ss, paramDefs) == PTs,
//    typeOfExp(ss, inExp) == IT,
//    typeOfExp(ss, outExp) == OT,
//    T == STRATEGY(s_decl, PTs, IT, OT),
//    @e.type := T.
//
  typeOfExp(s, e@LambdaStrategy(typeParams, params, inType, outType, exp)) = T :- {ds es TTYPEPARAMS TPARAMS TIN TOUT TBODY TEXP}
    new ds, ds -P-> s,                                      // create declaration scope
    new es, es -P-> ds,                                     // create expression scope
    declareAllTypeParams(ds, typeParams) == TTYPEPARAMS,    // declare type parameters in declaration scope
    declareParamDecls(es, ds, params) == TPARAMS,           // declare parameters in expression scope
    typeOfType(ds, inType) == TIN,                          // get strategy input type
    typeOfType(ds, outType) == TOUT,                        // get strategy output type
    STRATEGY(TPARAMS, TIN, TOUT) == T,                      // assign declaration type
    STRATEGY([], TIN, TOUT) == TBODY,                       // assign expected expression body type
    typeOfExp(es, exp) == TEXP,                             // get actual expression body type
    // It is an error if the expression type does not match the expected type,
    // but we don't need this assertion for the semantic type check, so we'll wrap it in a `try{}`.
    // Regardless of whether this fails, we will use the TIN and TOUT that where specified in the signature.
    try { subtypeOf(TEXP, TBODY) } | error $[expected expression of type [TBODY], got [TEXP]] @exp,
    @e.type := T.
    
    
  typeOfExp(s, d@LambdaRule(typeParams, params, inType, outType, inVar, outExp)) = T :- {ds es TTYPEPARAMS TPARAMS TIN TOUT TINEXP TOUTEXP}
    new ds, ds -P-> s,                                      // create declaration scope
    new es, es -P-> ds,                                     // create expression scope
    declareAllTypeParams(ds, typeParams) == TTYPEPARAMS,    // declare type parameters in declaration scope
    declareParamDecls(es, ds, params) == TPARAMS,           // declare parameters in expression scope
    typeOfType(ds, inType) == TIN,                          // get strategy input type
    typeOfType(ds, outType) == TOUT,                        // get strategy output type
    STRATEGY(TPARAMS, TIN, TOUT) == T,                      // assign declaration type
    declareParam(es, inVar, TIN),                           // declare the input parameter
    typeOfExp(es, outExp) == TOUTEXP,                       // get actual output expression type
    // It is an error if the expression type does not match the expected type,
    // but we don't need this assertion for the semantic type check, so we'll wrap them in a `try{}`.
    // Regardless of whether these fail, we will use the TIN and TOUT that where specified in the signature.
    try { subtypeOf(TOUTEXP, TOUT) } | error $[expected expression of type [TOUT], got [TOUTEXP]] @outExp,
    @d.type := T.
    
  typeOfExp(s, d@LambdaStrategyNoType(params, exp)) = T :- {ds es TPARAMS TIN TOUT}
    new ds, ds -P-> s,                                      // create declaration scope
    new es, es -P-> ds,                                     // create expression scope
    declareParamDeclsNoType(es, params) == TPARAMS,         // declare parameters in expression scope
    // We use fresh variables for types TIN and TOUT, and hope that they get a value
    // from the expression body.
    typeOfExp(es, exp) == STRATEGY([], TIN, TOUT),          // get actual expression body type
    STRATEGY(TPARAMS, TIN, TOUT) == T,                      // assign declaration type
    @d.type := T.
    
  typeOfExp(s, d@LambdaRuleNoType(params, inVar, outExp)) = T :- {ds es TPARAMS TIN TOUT}
    new ds, ds -P-> s,                                      // create declaration scope
    new es, es -P-> ds,                                     // create expression scope
    declareParamDeclsNoType(es, params) == TPARAMS,         // declare parameters in expression scope
    // We use fresh variables for types TIN and TOUT, and hope that they get a value
    // from the expression body.
    declareParam(es, inVar, TIN),                           // declare the input parameter
    typeOfExp(es, outExp) == TOUT,                          // get actual output expression type
    STRATEGY(TPARAMS, TIN, TOUT) == T,                      // assign declaration type
    @d.type := T.
    
  typeOfExp(s, Exp-Plhdr()) = T.

///**
// * Determines the type of a generic type instantiation.
// *
// * @param s the scope of the expression
// * @param exp the expression
// * @param 
// */
//rules typeOfGenericVar : scope * Exp * list((path * (string * TYPE))) -> TYPE
//  // One declaration found.
//  typeOfGenericVar(s, GenericVar(name, tas), [(_, (name', TE))]) = T :- {s_inst tps TAs}
//    // Create instance scope with P to the declaration scope
//    new s_inst, s_inst -P-> s_decl,
//    getTypeParams(s_decl) == tps,	// TODO: get s_decl by storing the declaration scope in the type
//    typesOfTypes(tas) == TAs,
//    typeArgsOk(s, s_inst, tps, TAs).
//  // No declarations found.
//  typeOfGenericVar(s, GenericVar(name, _), []) = T :-
//  	false | error $[Undefined: [name]] @name.
//  // Multiple declarations found.
//  typeOfGenericVar(s, GenericVar(name, _), [_,_|_]) = T :-
//  	false | error $[Multiple declarations of: [name]] @name.

//rules typeOfParamDef : scope * ParamDef -> TYPE
//  typesOfParamDefs maps typeOfParamDef(*, list(*)) = list(*)
//
//  typeOfParamDef(s, p@ParamDef(name, type)) = T :-
//    typeOfType(s, type) == T,
//    declareDecl(s, name, T),
//    @p.type := T.
//
//  typeOfParamDef(s, p@ParamDefNoType(name)) = T :-
//    declareDecl(s, name, T),
//    @p.type := T.
//
//  typeOfParamDef(s, ParamDef-Plhdr()) = T.
