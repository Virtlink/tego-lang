module statics/types

imports
  signatures/Tego-sig

  statics/declarations
  statics/expressions
  statics/modules
  statics/references

signature
  sorts TYPE
  constructors

    // Primitive Types
    BOOL    : TYPE
    CHAR    : TYPE

    BYTE    : TYPE
    SHORT   : TYPE
    INT     : TYPE
    LONG    : TYPE

    UBYTE   : TYPE
    USHORT  : TYPE
    UINT    : TYPE
    ULONG   : TYPE

    FLOAT   : TYPE
    DOUBLE  : TYPE

    // Misc
    MODULE  : scope -> TYPE
    STRATEGY: list(TYPE) * TYPE * TYPE -> TYPE
    CLASS   : ID -> TYPE
    LIST    : TYPE -> TYPE
    TUPLE   : list(TYPE) -> TYPE
    ANY     : TYPE
    UNIT    : TYPE
    STRING  : TYPE

  relations
    withType: -> TYPE

rules getScope : TYPE -> scope

  getScope(MODULE(s)) = s.

rules isPublicDecl : list(DeclMod)

  isPublicDecl([PublicDecl()|_]).
  isPublicDecl([_|mods]) :- isPublicDecl(mods).



rules typeOfType : scope * Type -> TYPE
  typesOfTypes maps typeOfType(*, list(*)) = list(*)

  typeOfType(s, t@StrategyType(paramTypes, inputType, outputType)) = T@STRATEGY(PTs, IT, OT) :-
    typesOfTypes(s, paramTypes) == PTs,
    typeOfType(s, inputType) == IT,
    typeOfType(s, outputType) == OT,
    @t.type := T.

  typeOfType(s, t@AnyType()) = T@ANY() :-
    @t.type := T.

  typeOfType(s, t@UnitType()) = T@UNIT() :-
    @t.type := T.

  typeOfType(s, t@BoolType()) = T@BOOL() :-
    @t.type := T.

  typeOfType(s, t@IntType()) = T@INT() :-
    @t.type := T.

  typeOfType(s, t@ListType(type)) = T@LIST(ET) :-
    typeOfType(s, type) == ET,
    @t.type := T.

  typeOfType(s, t@TypeRef(name)) = T :-
    resolveDecl(s, name) == T,
    @t.type := T.

  typeOfType(s, t@MemberTypeRef(rcv, name)) = T :- {T_rcv s_rcv}
    typeOfType(s, rcv) == T_rcv,
    getScope(T_rcv) == s_rcv,
    resolveDecl(s_rcv, name) == T,
    @t.type := T.

  typeOfType(s, t@TupleType(types)) = T@TUPLE(Ts) :-
    typesOfTypes(s, types) == Ts,
    @t.type := T.

  typeOfType(s, t@WldType()) = T :-
    @t.type := T.

  typeOfType(s, Type-Plhdr()) = _.
