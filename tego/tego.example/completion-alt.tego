module example1

import mb/tego/runtime::*
import mb/nabl2/terms::*
import mb/statix/common::*
import mb/statix/solver::*
import mb/statix/constraints::*

public def complete(ITermVar): SolverState -> [SolverState]
complete(v) =
  expandAllPredicates(v) ||>
  expandAllInjections(v) ||>
  expandAllQueries(v)    ||>
  expandDeterministic(v).

def expandAllPredicates(ITermVar): SolverState -> [SolverState]
expandAllPredicates(v) =
  expanded := {};
  repeatSS(
    limitSS(1, selectConstraints(CUser::class, \(constraint) = containsVar(v, constraint); <not(fetch(constraint.name))> expanded.\)) ||>
    expandPredicateConstraint(v, expanded) ||>
    assertValid(v)
  ).

def expandAllInjections(ITermVar): SolverState -> [SolverState]
expandAllInjections(v) =
  fixsetSS(trySS(
    expandInjection(v)
  )) ||>
  assertValid(v).

def expandAllQueries(ITermVar): SolverState -> [SolverState]
expandAllQueries(v) = distinctSS(orSS(idSS, fixsetSS(
  ifSS(
    limitSS(1, selectConstraints(CResolveQuery::class, \(constraint) = fail /*TODO*/.\)),
    expandQueryConstraint(v),
    idSS
  )
))).

def expandDeterministic(ITermVar): SolverState -> [SolverState]
expandDeterministic(v) = singleSS(
  expandPredicateConstraint(v) ||>
  assertValid(v) ||>
  filterPlaceholders(v)
).


// Core
extern def fixsetSS(SolverState -> [SolverState]): SolverState -> [SolverState]
extern def trySS(SolverState -> [SolverState]): SolverState -> [SolverState]
extern def repeatSS(SolverState -> [SolverState]): SolverState -> [SolverState]
extern def limitSS(Int, SolverState -> [SolverState]): SolverState -> [SolverState]
extern def distinctSS(SolverState -> [SolverState]): SolverState -> [SolverState]
extern def orSS(SolverState -> [SolverState], SolverState -> [SolverState]): SolverState -> [SolverState]
extern def idSS: SolverState -> [SolverState]
extern def ifSS(SolverState -> [SolverState], SolverState -> [SolverState], SolverState -> [SolverState]): SolverState -> [SolverState]
extern def singleSS(SolverState -> [SolverState]): SolverState -> [SolverState]

// Core generics
extern def fixset<T>(T -> [T]): T -> [T]
extern def try<T>(T -> [T]): T -> [T]
extern def repeat<T>(T -> [T]): T -> [T]
extern def limit<T, R>(Int, T -> [R]): T -> [R]
extern def distinct<T, R>(T -> [R]): T -> [R]
extern def or<T, R>(T -> [R], T -> [R]): T -> [R]
extern def if<T, M, R>(T -> [M], M -> [R], T -> [R]): T -> [R]
extern def single<T, R>(T -> [R]): T -> [R]

// Built-ins
extern def selectConstraints(Class, (IConstraint) SolverState -> [SolverState]): SolverState -> [SolverState]
extern def assertValid(ITermVar): SolverState -> [SolverState]
extern def expandPredicateConstraint(ITermVar): SolverState -> [SolverState]
extern def expandQueryConstraint(ITermVar): SolverState -> [SolverState]
extern def expandInjection(ITermVar): SolverState -> [SolverState]
extern def filterPlaceholders(ITermVar): SolverState -> [SolverState]
extern def containsVar(ITermVar, IConstraint): SolverState -> [SolverState]

// Statix & NaBL
extern module mb/statix/constraints
class type CResolveQuery
class type CUser

extern module mb/statix/common
class type SolverState

extern module mb/statix/solver
class type IConstraint

extern module mb/nabl2/terms
class type ITermVar

// Tego built-ins
extern module mb/tego/runtime
import mb/statix/common::SolverState
extern def flatMap(SolverState -> [SolverState]): [SolverState] -> [SolverState]