module example1

class Var
class Constraint
class SolverState
class Class


def complete(v: Var): SolverState -> [SolverState]
= expandAllPredicates(v) ||>
  expandAllInjections(v) ||>
  expandAllQueries(v)    ||>
  expandDeterministic(v)

// Explicit flatmap
def complete(v) =
  expandAllPredicates(v) ;
  flatmap(expandAllInjections(v) ;
  flatmap(expandAllQueries(v) ;
  flatmap(expandDeterministic(v))))

// Explicit flatmap
def complete(v) =
  expandAllPredicates(v) ;
  flatmap(expandAllInjections(v)) ;
  flatmap(expandAllQueries(v)) ;
  flatmap(expandDeterministic(v))

// Explicit evaluation
def complete(v) :- t ->
  <expandAllPredicates(v) ;
  flatmap(expandAllInjections(v)) ;
  flatmap(expandAllQueries(v)) ;
  flatmap(expandDeterministic(v))> t

// Lift evaluation through seq
def complete(v) :- t ->
  // Note how it is inside out
  <flatmap(expandDeterministic(v))>
  <flatmap(expandAllQueries(v))>
  <flatmap(expandAllInjections(v))>
  <expandAllPredicates(v)> t

// Seq to let
def complete(v) :- t ->
  let x1 = <expandAllPredicates(v)> t,                // returns a lazy list
  let x2 = <flatmap(expandAllInjections(v))> x1,      // returns a lazy list
  let x3 = <flatmap(expandAllQueries(v))> x2,         // returns a lazy list
  let x4 = <flatmap(expandDeterministic(v))> x3,      // returns a lazy list
  x4

//// Explicit evaluation and yield
//complete(v) t = seq {
//    yieldAll <expandAllPredicates(v) ;
//      flatmap(expandAllInjections(v)) ;
//      flatmap(expandAllQueries(v)) ;
//      flatmap(expandDeterministic(v))> t.
//  }.
//
//// yieldAll
//complete(v) t = seq {
//    let x1 = <expandAllPredicates(v) ;
//      flatmap(expandAllInjections(v)) ;
//      flatmap(expandAllQueries(v)) ;
//      flatmap(expandDeterministic(v))> t,
//    yieldAll x1.
//  }.
//
//// yieldAll to loop
//complete(v) t = seq {
//    let x1 = <expandAllPredicates(v) ;
//      flatmap(expandAllInjections(v)) ;
//      flatmap(expandAllQueries(v)) ;
//      flatmap(expandDeterministic(v))> t,
//    foreach (x in x1) {
//      yield x.
//    }.
//  }.

val cls: Class // TODO: Write specific class

def expandAllPredicates(v: Var): SolverState -> [SolverState]
= repeatSS(
    limitSS(1, selectConstraints(cls, \(constraint) = containsVar(v, constraint)\)) ||>
    expandPredicateConstraint(v) ||>
    assertValid(v)
  )

def expandAllInjections(v: Var): SolverState -> [SolverState]
= fixsetSS(trySS(
    expandInjection(v)
  )) ||>
  assertValid(v)

def expandAllQueries(v: Var): SolverState -> [SolverState]
= distinctSS(orSS(idSS, fixsetSS(
  ifSS(
    limitSS(1, selectConstraints(cls, \(constraint) = fail /*TODO*/\)),
    expandQueryConstraint(v),
    idSS
  )
)))

def expandDeterministic(v: Var): SolverState -> [SolverState]
= singleSS(
  expandPredicateConstraint(v) ||>
  assertValid(v) ||>
  filterPlaceholders(v)
)


// Core
extern def fixsetSS(SolverState -> [SolverState]): SolverState -> [SolverState]
extern def trySS(SolverState -> [SolverState]): SolverState -> [SolverState]
extern def repeatSS(SolverState -> [SolverState]): SolverState -> [SolverState]
extern def limitSS(Int, SolverState -> [SolverState]): SolverState -> [SolverState]
extern def distinctSS(SolverState -> [SolverState]): SolverState -> [SolverState]
extern def orSS(SolverState -> [SolverState], SolverState -> [SolverState]): SolverState -> [SolverState]
extern def idSS: SolverState -> [SolverState]
extern def ifSS(SolverState -> [SolverState], SolverState -> [SolverState], SolverState -> [SolverState]): SolverState -> [SolverState]
extern def singleSS(SolverState -> [SolverState]): SolverState -> [SolverState]
extern def flatmap(SolverState -> [SolverState]): [SolverState] -> [SolverState]

// Core generics
extern def fixset<T>(T -> [T]): T -> [T]
extern def try<T>(T -> [T]): T -> [T]
extern def repeat<T>(T -> [T]): T -> [T]
extern def limit<T, R>(Int, T -> [R]): T -> [R]
extern def distinct<T, R>(T -> [R]): T -> [R]
extern def or<T, R>(T -> [R], T -> [R]): T -> [R]
extern def if<T, M, R>(T -> [M], M -> [R], T -> [R]): T -> [R]
extern def single<T, R>(T -> [R]): T -> [R]

// Built-ins
extern def selectConstraints(Class, (Constraint) SolverState -> [SolverState]): SolverState -> [SolverState]
extern def assertValid(Var): SolverState -> [SolverState]
extern def expandPredicateConstraint(Var): SolverState -> [SolverState]
extern def expandQueryConstraint(Var): SolverState -> [SolverState]
extern def expandInjection(Var): SolverState -> [SolverState]
extern def filterPlaceholders(Var): SolverState -> [SolverState]
extern def containsVar(Var, Constraint): SolverState -> [SolverState]
