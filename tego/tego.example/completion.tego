module example1

import mb/statix/constraints::*

class type Var
class type Constraint
class type SolverState
//class type Class


def complete(Var): SolverState -> [SolverState]
complete(v) =
  expandAllPredicates(v) ||>
  expandAllInjections(v) ||>
  expandAllQueries(v)    ||>
  expandDeterministic(v).

def expandAllPredicates(Var): SolverState -> [SolverState]
expandAllPredicates(v) = repeatSS(
    limitSS(1, selectConstraints(CUser::class, \(constraint) = containsVar(v, constraint).\)) ||>
    expandPredicateConstraint(v) ||>
    assertValid(v)
  ).

def expandAllInjections(Var): SolverState -> [SolverState]
expandAllInjections(v) =
  fixsetSS(trySS(
    expandInjection(v)
  )) ||>
  assertValid(v).

def expandAllQueries(Var): SolverState -> [SolverState]
expandAllQueries(v) = distinctSS(orSS(idSS, fixsetSS(
  ifSS(
    limitSS(1, selectConstraints(CResolveQuery::class, \(constraint) = fail /*TODO*/.\)),
    expandQueryConstraint(v),
    idSS
  )
))).

def expandDeterministic(Var): SolverState -> [SolverState]
expandDeterministic(v) = singleSS(
  expandPredicateConstraint(v) ||>
  assertValid(v) ||>
  filterPlaceholders(v)
).


// Core
extern def fixsetSS(SolverState -> [SolverState]): SolverState -> [SolverState]
extern def trySS(SolverState -> [SolverState]): SolverState -> [SolverState]
extern def repeatSS(SolverState -> [SolverState]): SolverState -> [SolverState]
extern def limitSS(Int, SolverState -> [SolverState]): SolverState -> [SolverState]
extern def distinctSS(SolverState -> [SolverState]): SolverState -> [SolverState]
extern def orSS(SolverState -> [SolverState], SolverState -> [SolverState]): SolverState -> [SolverState]
extern def idSS: SolverState -> [SolverState]
extern def ifSS(SolverState -> [SolverState], SolverState -> [SolverState], SolverState -> [SolverState]): SolverState -> [SolverState]
extern def singleSS(SolverState -> [SolverState]): SolverState -> [SolverState]

// Core generics
extern def fixset<T>(T -> [T]): T -> [T]
extern def try<T>(T -> [T]): T -> [T]
extern def repeat<T>(T -> [T]): T -> [T]
extern def limit<T, R>(Int, T -> [R]): T -> [R]
extern def distinct<T, R>(T -> [R]): T -> [R]
extern def or<T, R>(T -> [R], T -> [R]): T -> [R]
extern def if<T, M, R>(T -> [M], M -> [R], T -> [R]): T -> [R]
extern def single<T, R>(T -> [R]): T -> [R]

// Built-ins
extern def selectConstraints(Class, (Constraint) SolverState -> [SolverState]): SolverState -> [SolverState]
extern def assertValid(Var): SolverState -> [SolverState]
extern def expandPredicateConstraint(Var): SolverState -> [SolverState]
extern def expandQueryConstraint(Var): SolverState -> [SolverState]
extern def expandInjection(Var): SolverState -> [SolverState]
extern def filterPlaceholders(Var): SolverState -> [SolverState]
extern def containsVar(Var, Constraint): SolverState -> [SolverState]

module mb/statix/constraints
class type CResolveQuery
class type CUser

